{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nimport CryptoJS from 'crypto-js';\nvar db = SQLite.openDatabase('passwordManager.db');\nvar ENCRYPTION_KEY = 'your-secret-key-123';\nvar initDatabase = function initDatabase() {\n  db.transaction(function (tx) {\n    tx.executeSql('CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, website TEXT, username TEXT, password TEXT, timestamp TEXT);', [], function () {\n      return console.log('Table created successfully');\n    }, function (_, error) {\n      return console.log('Error creating table:', error);\n    });\n  });\n};\nvar encryptPassword = function encryptPassword(password) {\n  return CryptoJS.AES.encrypt(password, ENCRYPTION_KEY).toString();\n};\nvar decryptPassword = function decryptPassword(encryptedPassword) {\n  var bytes = CryptoJS.AES.decrypt(encryptedPassword, ENCRYPTION_KEY);\n  return bytes.toString(CryptoJS.enc.Utf8);\n};\nvar addPassword = function addPassword(category, website, username, password, callback) {\n  var encryptedPassword = encryptPassword(password);\n  var timestamp = new Date().toLocaleString();\n  db.transaction(function (tx) {\n    tx.executeSql('INSERT INTO passwords (category, website, username, password, timestamp) VALUES (?, ?, ?, ?, ?);', [category, website, username, encryptedPassword, timestamp], function (_, _ref) {\n      var insertId = _ref.insertId;\n      return callback(insertId);\n    }, function (_, error) {\n      return console.log('Error adding password:', error);\n    });\n  });\n};\nvar updatePassword = function updatePassword(id, category, website, username, password, callback) {\n  var encryptedPassword = encryptPassword(password);\n  var timestamp = new Date().toLocaleString();\n  db.transaction(function (tx) {\n    tx.executeSql('UPDATE passwords SET category = ?, website = ?, username = ?, password = ?, timestamp = ? WHERE id = ?;', [category, website, username, encryptedPassword, timestamp, id], function () {\n      return callback();\n    }, function (_, error) {\n      return console.log('Error updating password:', error);\n    });\n  });\n};\nvar getPasswordsByCategory = function getPasswordsByCategory(category, callback) {\n  db.transaction(function (tx) {\n    tx.executeSql('SELECT * FROM passwords WHERE category = ?;', [category], function (_, _ref2) {\n      var rows = _ref2.rows;\n      var passwords = rows._array.map(function (item) {\n        return {\n          id: item.id.toString(),\n          website: item.website,\n          username: item.username,\n          password: decryptPassword(item.password),\n          timestamp: item.timestamp\n        };\n      });\n      callback(passwords);\n    }, function (_, error) {\n      return console.log('Error retrieving passwords:', error);\n    });\n  });\n};\nvar deletePassword = function deletePassword(id, callback) {\n  db.transaction(function (tx) {\n    tx.executeSql('DELETE FROM passwords WHERE id = ?;', [id], function () {\n      return callback();\n    }, function (_, error) {\n      return console.log('Error deleting password:', error);\n    });\n  });\n};\nexport { initDatabase, addPassword, updatePassword, getPasswordsByCategory, deletePassword };","map":{"version":3,"names":["SQLite","CryptoJS","db","openDatabase","ENCRYPTION_KEY","initDatabase","transaction","tx","executeSql","console","log","_","error","encryptPassword","password","AES","encrypt","toString","decryptPassword","encryptedPassword","bytes","decrypt","enc","Utf8","addPassword","category","website","username","callback","timestamp","Date","toLocaleString","_ref","insertId","updatePassword","id","getPasswordsByCategory","_ref2","rows","passwords","_array","map","item","deletePassword"],"sources":["D:/pro1/PasswordManagerApp/src/utils/Database.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\nimport CryptoJS from 'crypto-js';\r\n\r\n// Initialize the database\r\nconst db = SQLite.openDatabase('passwordManager.db');\r\n\r\n// Encryption key (replace with a secure key in production)\r\nconst ENCRYPTION_KEY = 'your-secret-key-123';\r\n\r\n// Initialize the database and create the passwords table\r\nconst initDatabase = () => {\r\n  db.transaction(tx => {\r\n    tx.executeSql(\r\n      'CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, website TEXT, username TEXT, password TEXT, timestamp TEXT);',\r\n      [],\r\n      () => console.log('Table created successfully'),\r\n      (_, error) => console.log('Error creating table:', error)\r\n    );\r\n  });\r\n};\r\n\r\n// Encrypt password before storing\r\nconst encryptPassword = (password) => {\r\n  return CryptoJS.AES.encrypt(password, ENCRYPTION_KEY).toString();\r\n};\r\n\r\n// Decrypt password when retrieving\r\nconst decryptPassword = (encryptedPassword) => {\r\n  const bytes = CryptoJS.AES.decrypt(encryptedPassword, ENCRYPTION_KEY);\r\n  return bytes.toString(CryptoJS.enc.Utf8);\r\n};\r\n\r\n// Add a new password to the database\r\nconst addPassword = (category, website, username, password, callback) => {\r\n  const encryptedPassword = encryptPassword(password);\r\n  const timestamp = new Date().toLocaleString();\r\n  db.transaction(tx => {\r\n    tx.executeSql(\r\n      'INSERT INTO passwords (category, website, username, password, timestamp) VALUES (?, ?, ?, ?, ?);',\r\n      [category, website, username, encryptedPassword, timestamp],\r\n      (_, { insertId }) => callback(insertId),\r\n      (_, error) => console.log('Error adding password:', error)\r\n    );\r\n  });\r\n};\r\n\r\n// Update an existing password in the database\r\nconst updatePassword = (id, category, website, username, password, callback) => {\r\n  const encryptedPassword = encryptPassword(password);\r\n  const timestamp = new Date().toLocaleString();\r\n  db.transaction(tx => {\r\n    tx.executeSql(\r\n      'UPDATE passwords SET category = ?, website = ?, username = ?, password = ?, timestamp = ? WHERE id = ?;',\r\n      [category, website, username, encryptedPassword, timestamp, id],\r\n      () => callback(),\r\n      (_, error) => console.log('Error updating password:', error)\r\n    );\r\n  });\r\n};\r\n\r\n// Retrieve passwords by category\r\nconst getPasswordsByCategory = (category, callback) => {\r\n  db.transaction(tx => {\r\n    tx.executeSql(\r\n      'SELECT * FROM passwords WHERE category = ?;',\r\n      [category],\r\n      (_, { rows }) => {\r\n        const passwords = rows._array.map(item => ({\r\n          id: item.id.toString(), // Convert to string for consistency\r\n          website: item.website,\r\n          username: item.username,\r\n          password: decryptPassword(item.password),\r\n          timestamp: item.timestamp,\r\n        }));\r\n        callback(passwords);\r\n      },\r\n      (_, error) => console.log('Error retrieving passwords:', error)\r\n    );\r\n  });\r\n};\r\n\r\n// Delete a password by ID\r\nconst deletePassword = (id, callback) => {\r\n  db.transaction(tx => {\r\n    tx.executeSql(\r\n      'DELETE FROM passwords WHERE id = ?;',\r\n      [id],\r\n      () => callback(),\r\n      (_, error) => console.log('Error deleting password:', error)\r\n    );\r\n  });\r\n};\r\n\r\nexport { initDatabase, addPassword, updatePassword, getPasswordsByCategory, deletePassword };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}