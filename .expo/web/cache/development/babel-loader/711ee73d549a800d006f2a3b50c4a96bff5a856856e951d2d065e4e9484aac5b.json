{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as SQLite from 'expo-sqlite';\nimport CryptoJS from 'crypto-js';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ENCRYPTION_KEY = 'your-secret-key-123';\nvar db;\nif (Platform.OS !== 'web') {\n  db = SQLite.openDatabase('passwordManager.db');\n}\nvar STORAGE_KEY = 'passwords';\nvar getLocalStoragePasswords = function getLocalStoragePasswords() {\n  if (Platform.OS === 'web') {\n    var data = localStorage.getItem(STORAGE_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  return [];\n};\nvar saveLocalStoragePasswords = function saveLocalStoragePasswords(passwords) {\n  if (Platform.OS === 'web') {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(passwords));\n  }\n};\nvar initDatabase = function initDatabase() {\n  if (Platform.OS !== 'web') {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, website TEXT, username TEXT, password TEXT, timestamp TEXT);', [], function () {\n        return console.log('Table created successfully');\n      }, function (_, error) {\n        return console.log('Error creating table:', error);\n      });\n    });\n  }\n};\nvar encryptPassword = function encryptPassword(password) {\n  return CryptoJS.AES.encrypt(password, ENCRYPTION_KEY).toString();\n};\nvar decryptPassword = function decryptPassword(encryptedPassword) {\n  var bytes = CryptoJS.AES.decrypt(encryptedPassword, ENCRYPTION_KEY);\n  return bytes.toString(CryptoJS.enc.Utf8);\n};\nvar addPassword = function addPassword(category, website, username, password, callback) {\n  var encryptedPassword = encryptPassword(password);\n  var timestamp = new Date().toLocaleString();\n  if (Platform.OS === 'web') {\n    var passwords = getLocalStoragePasswords();\n    var newId = passwords.length > 0 ? Math.max.apply(Math, _toConsumableArray(passwords.map(function (p) {\n      return parseInt(p.id);\n    }))) + 1 : 1;\n    var newPassword = {\n      id: newId.toString(),\n      category: category,\n      website: website,\n      username: username,\n      password: encryptedPassword,\n      timestamp: timestamp\n    };\n    passwords.push(newPassword);\n    saveLocalStoragePasswords(passwords);\n    callback(newId);\n  } else {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO passwords (category, website, username, password, timestamp) VALUES (?, ?, ?, ?, ?);', [category, website, username, encryptedPassword, timestamp], function (_, _ref) {\n        var insertId = _ref.insertId;\n        return callback(insertId);\n      }, function (_, error) {\n        return console.log('Error adding password:', error);\n      });\n    });\n  }\n};\nvar updatePassword = function updatePassword(id, category, website, username, password, callback) {\n  var encryptedPassword = encryptPassword(password);\n  var timestamp = new Date().toLocaleString();\n  if (Platform.OS === 'web') {\n    var passwords = getLocalStoragePasswords();\n    var index = passwords.findIndex(function (p) {\n      return p.id === id;\n    });\n    if (index !== -1) {\n      passwords[index] = {\n        id: id,\n        category: category,\n        website: website,\n        username: username,\n        password: encryptedPassword,\n        timestamp: timestamp\n      };\n      saveLocalStoragePasswords(passwords);\n      callback();\n    }\n  } else {\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE passwords SET category = ?, website = ?, username = ?, password = ?, timestamp = ? WHERE id = ?;', [category, website, username, encryptedPassword, timestamp, id], function () {\n        return callback();\n      }, function (_, error) {\n        return console.log('Error updating password:', error);\n      });\n    });\n  }\n};\nvar getPasswordsByCategory = function getPasswordsByCategory(category, callback) {\n  if (Platform.OS === 'web') {\n    var passwords = getLocalStoragePasswords();\n    var filtered = passwords.filter(function (p) {\n      return p.category === category;\n    }).map(function (item) {\n      return {\n        id: item.id,\n        website: item.website,\n        username: item.username,\n        password: decryptPassword(item.password),\n        timestamp: item.timestamp\n      };\n    });\n    callback(filtered);\n  } else {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM passwords WHERE category = ?;', [category], function (_, _ref2) {\n        var rows = _ref2.rows;\n        var passwords = rows._array.map(function (item) {\n          return {\n            id: item.id.toString(),\n            website: item.website,\n            username: item.username,\n            password: decryptPassword(item.password),\n            timestamp: item.timestamp\n          };\n        });\n        callback(passwords);\n      }, function (_, error) {\n        return console.log('Error retrieving passwords:', error);\n      });\n    });\n  }\n};\nvar deletePassword = function deletePassword(id, callback) {\n  if (Platform.OS === 'web') {\n    var passwords = getLocalStoragePasswords();\n    var updatedPasswords = passwords.filter(function (p) {\n      return p.id !== id;\n    });\n    saveLocalStoragePasswords(updatedPasswords);\n    callback();\n  } else {\n    db.transaction(function (tx) {\n      tx.executeSql('DELETE FROM passwords WHERE id = ?;', [id], function () {\n        return callback();\n      }, function (_, error) {\n        return console.log('Error deleting password:', error);\n      });\n    });\n  }\n};\nexport { initDatabase, addPassword, updatePassword, getPasswordsByCategory, deletePassword };","map":{"version":3,"names":["SQLite","CryptoJS","Platform","ENCRYPTION_KEY","db","OS","openDatabase","STORAGE_KEY","getLocalStoragePasswords","data","localStorage","getItem","JSON","parse","saveLocalStoragePasswords","passwords","setItem","stringify","initDatabase","transaction","tx","executeSql","console","log","_","error","encryptPassword","password","AES","encrypt","toString","decryptPassword","encryptedPassword","bytes","decrypt","enc","Utf8","addPassword","category","website","username","callback","timestamp","Date","toLocaleString","newId","length","Math","max","apply","_toConsumableArray","map","p","parseInt","id","newPassword","push","_ref","insertId","updatePassword","index","findIndex","getPasswordsByCategory","filtered","filter","item","_ref2","rows","_array","deletePassword","updatedPasswords"],"sources":["D:/pro1/PasswordManagerApp/src/utils/Database.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\nimport CryptoJS from 'crypto-js';\r\nimport { Platform } from 'react-native';\r\n\r\n// Encryption key (replace with a secure key in production)\r\nconst ENCRYPTION_KEY = 'your-secret-key-123';\r\n\r\n// Initialize the database based on the platform\r\nlet db;\r\nif (Platform.OS !== 'web') {\r\n  db = SQLite.openDatabase('passwordManager.db');\r\n}\r\n\r\n// LocalStorage fallback for web\r\nconst STORAGE_KEY = 'passwords';\r\n\r\n// Helper to get passwords from localStorage on web\r\nconst getLocalStoragePasswords = () => {\r\n  if (Platform.OS === 'web') {\r\n    const data = localStorage.getItem(STORAGE_KEY);\r\n    return data ? JSON.parse(data) : [];\r\n  }\r\n  return [];\r\n};\r\n\r\n// Helper to save passwords to localStorage on web\r\nconst saveLocalStoragePasswords = (passwords) => {\r\n  if (Platform.OS === 'web') {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(passwords));\r\n  }\r\n};\r\n\r\n// Initialize the database (mobile only)\r\nconst initDatabase = () => {\r\n  if (Platform.OS !== 'web') {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        'CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, website TEXT, username TEXT, password TEXT, timestamp TEXT);',\r\n        [],\r\n        () => console.log('Table created successfully'),\r\n        (_, error) => console.log('Error creating table:', error)\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\n// Encrypt password before storing\r\nconst encryptPassword = (password) => {\r\n  return CryptoJS.AES.encrypt(password, ENCRYPTION_KEY).toString();\r\n};\r\n\r\n// Decrypt password when retrieving\r\nconst decryptPassword = (encryptedPassword) => {\r\n  const bytes = CryptoJS.AES.decrypt(encryptedPassword, ENCRYPTION_KEY);\r\n  return bytes.toString(CryptoJS.enc.Utf8);\r\n};\r\n\r\n// Add a new password to the database\r\nconst addPassword = (category, website, username, password, callback) => {\r\n  const encryptedPassword = encryptPassword(password);\r\n  const timestamp = new Date().toLocaleString();\r\n\r\n  if (Platform.OS === 'web') {\r\n    const passwords = getLocalStoragePasswords();\r\n    const newId = passwords.length > 0 ? Math.max(...passwords.map(p => parseInt(p.id))) + 1 : 1;\r\n    const newPassword = {\r\n      id: newId.toString(),\r\n      category,\r\n      website,\r\n      username,\r\n      password: encryptedPassword,\r\n      timestamp,\r\n    };\r\n    passwords.push(newPassword);\r\n    saveLocalStoragePasswords(passwords);\r\n    callback(newId);\r\n  } else {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        'INSERT INTO passwords (category, website, username, password, timestamp) VALUES (?, ?, ?, ?, ?);',\r\n        [category, website, username, encryptedPassword, timestamp],\r\n        (_, { insertId }) => callback(insertId),\r\n        (_, error) => console.log('Error adding password:', error)\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\n// Update an existing password in the database\r\nconst updatePassword = (id, category, website, username, password, callback) => {\r\n  const encryptedPassword = encryptPassword(password);\r\n  const timestamp = new Date().toLocaleString();\r\n  if (Platform.OS === 'web') {\r\n    const passwords = getLocalStoragePasswords();\r\n    const index = passwords.findIndex(p => p.id === id);\r\n    if (index !== -1) {\r\n      passwords[index] = { id, category, website, username, password: encryptedPassword, timestamp };\r\n      saveLocalStoragePasswords(passwords);\r\n      callback();\r\n    }\r\n  } else {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        'UPDATE passwords SET category = ?, website = ?, username = ?, password = ?, timestamp = ? WHERE id = ?;',\r\n        [category, website, username, encryptedPassword, timestamp, id],\r\n        () => callback(),\r\n        (_, error) => console.log('Error updating password:', error)\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\n// Retrieve passwords by category\r\nconst getPasswordsByCategory = (category, callback) => {\r\n  if (Platform.OS === 'web') {\r\n    const passwords = getLocalStoragePasswords();\r\n    const filtered = passwords\r\n      .filter(p => p.category === category)\r\n      .map(item => ({\r\n        id: item.id,\r\n        website: item.website,\r\n        username: item.username,\r\n        password: decryptPassword(item.password),\r\n        timestamp: item.timestamp,\r\n      }));\r\n    callback(filtered);\r\n  } else {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        'SELECT * FROM passwords WHERE category = ?;',\r\n        [category],\r\n        (_, { rows }) => {\r\n          const passwords = rows._array.map(item => ({\r\n            id: item.id.toString(),\r\n            website: item.website,\r\n            username: item.username,\r\n            password: decryptPassword(item.password),\r\n            timestamp: item.timestamp,\r\n          }));\r\n          callback(passwords);\r\n        },\r\n        (_, error) => console.log('Error retrieving passwords:', error)\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\n// Delete a password by ID\r\nconst deletePassword = (id, callback) => {\r\n  if (Platform.OS === 'web') {\r\n    const passwords = getLocalStoragePasswords();\r\n    const updatedPasswords = passwords.filter(p => p.id !== id);\r\n    saveLocalStoragePasswords(updatedPasswords);\r\n    callback();\r\n  } else {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        'DELETE FROM passwords WHERE id = ?;',\r\n        [id],\r\n        () => callback(),\r\n        (_, error) => console.log('Error deleting password:', error)\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\nexport { initDatabase, addPassword, updatePassword, getPasswordsByCategory, deletePassword };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}